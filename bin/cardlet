#! /usr/bin/env ruby

require 'thor'
require 'cardlet'

module CardletCLI
  class Deck < Thor
    option :name, required: true
    option :directory
    desc 'create', 'Create a new deck'
    def create
      deck = Cardlet::Deck.new(options[:name])
      Cardlet::Persistence::Deck.write(deck, directory)
    end

    option :directory
    desc 'list', 'List all the decks'
    def list
      entries = Cardlet::Persistence::Deck.index(directory)
      puts entries
    end

    option :name, required: true
    option :directory
    desc 'questions', 'List all questions in a deck'
    def questions
      json = Cardlet::Persistence::Deck.load(options[:name], directory)
      hash = JSON.parse(json)
      deck = Cardlet::Deck.from_json(hash)
      puts deck.inspect
    end

    option :name, required: true
    desc 'delete', 'Delete an existing deck'
    def delete
      Cardlet::Persistence::Deck.delete(options[:name], directory)
    end

    private

    def directory
      directory = options[:directory] || "#{Dir.home}/.cardlet/decks"
    end
  end

  class Card < Thor
    desc 'create', 'Create a new card'
    option :deck, required: true
    option :answer, required: true
    option :prompt, required: true
    def create

    end

    option :name, required: true
    desc 'delete', 'Delete an existing card'
    def delete
      puts "Deleting a card called #{options[:name]}"
    end
  end

  class TopLevel < Thor
    desc 'card [ create | delete ]', 'Do something with a card'
    subcommand 'card', Card

    desc 'deck [ create | delete ]', 'Do something with a deck'
    subcommand 'deck', Deck
  end
end

CardletCLI::TopLevel.start(ARGV)
